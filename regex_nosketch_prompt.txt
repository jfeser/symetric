You are an expert programmer.
You write programs in a domain-specific language called REG.
REG is a language for writing string matching programs, similar to regular expressions.

The REG language has the following operators:
 - `concat(r1, r2)` matches when `r1` matches followed by `r2`.
 - `and(r1, r2)` matches when `r1` and `r2` match.
 - `or(r1, r2)` matches when `r1` or `r2` match.
 - `repeat(r, n)` matches when `r` matches `n` times.
 - `repeatatleast(r, n)` matches when `r` matches at least `n` times.
 - `repeatrange(r, min, max)` matches when `r` matches between `min` and `max` times.
 - `optional(r)` matches either `r` or the empty string.
 - `not(r)` matches when `r` does not match.

REG supports character sets. A single character between < and > matches that character.
For example, <a> matches the letter 'a'.

REG has the following special character sets:
 - `<let>` matches a single letter.
 - `<num>` matches a single number.
 - `<any>` matches any letter.
 - `<cap>` matches capital letters.
 - `<low>` matches lowercase letters.

Write a REG program that matches the positive examples and does not match the negative examples.

Positive:
 - "peter"
 - "alex"
 - "ramon"
 - "thomas"

Negative:
 - "pe<.?ter"
 - "ale8"
 - "?ramon"
 - "tho<>?mass"

Program:
repeatatleast(<let>,1)

Positive:
 - "(0.4545 && 0.567) || 456"
 - "0.456 && 0.567"

Negative:
 - "9876-5-4321"
 - "9876-5-4321 (attack)"
 - "(0.4545 && 0.567) || 456 && (me)"

Program:
repeatatleast(or(<num>,or(<&>,or(<|>,or(<.>,or(<(>,or(<)>,< >)))))),1)

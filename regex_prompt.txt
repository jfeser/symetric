You are an expert programmer.
You write programs in a domain-specific language called REG.
REG is a language for writing string matching programs, similar to regular expressions.

The REG language has the following operators:
 - `concat(r1, r2)` matches when `r1` matches followed by `r2`.
 - `and(r1, r2)` matches when `r1` and `r2` match.
 - `or(r1, r2)` matches when `r1` or `r2` match.
 - `repeat(r, n)` matches when `r` matches `n` times.
 - `repeatatleast(r, n)` matches when `r` matches at least `n` times.
 - `repeatrange(r, min, max)` matches when `r` matches between `min` and `max` times.
 - `optional(r)` matches either `r` or the empty string.
 - `not(r)` matches when `r` does not match.
 - `startwith(r)` matches when the string starts with `r`.
 - `endwith(r)` matches when the string ends with `r`.
 - `contain(r)` matches when the string contains a match of `r`.
 - `star(r)` matches when `r` matches any number of times.
 - `sep(r1, r2)` matches when the string consists of matches of `r1` separated by matches of `r2`.

REG supports character sets. A single character between < and > matches that character.
For example, <a> matches the letter 'a'.

REG has the following special character sets:
 - `<let>` matches a single letter.
 - `<num>` matches a single number.
 - `<num1-9` matches the numbers from 1 to 9.
 - `<any>` matches any character.
 - `<cap>` matches capital letters.
 - `<low>` matches lowercase letters.
 - `<vow>` matches vowels.
 - `<spec>` matches special characters.
 - `<alphanum>` matches alphanumeric characters.
 - `<hex>` matches hexadecimal characters.

A program sketch is a REG program with holes.
A hole is written ?{r1, r2, r3, ...}.
A REG program conforms to a program sketch if it contains one of the expressions in each hole in the sketch and matches the sketch otherwise.
Every program conforms the empty hole ?.

Here are some examples of program sketches:
 - repeatatleast(<let>,1) conforms to the program sketch ?{<let>}
 - repeatatleast(<let>,1) conforms to the program sketch ?{<let>,<a>}
 - repeatatleast(<let>,1) does not conform to the program sketch ?{<num>}
 - repeatatleast(<let>,1) conforms to the program sketch repeatatleast(?{<num>,<let>}, 1)
 - repeatatleast(<let>,1) does not conform to the program sketch repeat(?{<num>,<let>}, 1)

Write a REG program that conforms to the program sketch, matches the positive examples, and does not match the negative examples.

Sketch:
?{<let>}

Positive:
 - "peter"
 - "alex"
 - "ramon"
 - "thomas"

Negative:
 - "pe<.?ter"
 - "ale8"
 - "?ramon"
 - "tho<>?mass"

Program:
repeatatleast(<let>,1)

Sketch:
?{or(<&>,<|>),or(<.>,or(<(>,or(<)>,< >)))}

Positive:
 - "(0.4545 && 0.567) || 456"
 - "0.456 && 0.567"

Negative:
 - "9876-5-4321"
 - "9876-5-4321 (attack)"
 - "(0.4545 && 0.567) || 456 && (me)"

Program:
repeatatleast(or(<num>,or(<&>,or(<|>,or(<.>,or(<(>,or(<)>,< >)))))),1)

#+PROPERTY: header-args:python :session P :results output
#+PROPERTY: header-args:bash :results output

#+begin_src bash
  export CORE_PROFILER=
  ./run_merge.sh
#+end_src

#+RESULTS:

#+begin_src bash
  head merge_results.csv
#+end_src

#+RESULTS:
#+begin_example
cad_abs,9,bench/cad2/random_size_9_nprim_10/scene_95.sexp,26,26,4,9.233475,3,9,35,35,26
cad_abs,9,bench/cad2/random_size_9_nprim_10/scene_69.sexp,26,23,4,10.607958,3,9,35,35,26
cad_abs,9,bench/cad2/random_size_9_nprim_10/scene_4.sexp,28,28,4,101.496458,3,9,37,37,28
cad_abs,9,bench/cad2/random_size_9_nprim_10/scene_72.sexp,28,28,4,131.585121,3,9,37,37,28
cad_abs,9,bench/cad2/random_size_9_nprim_10/scene_66.sexp,40,38,6,160.923243,3,9,56,56,40
cad_abs,9,bench/cad2/random_size_9_nprim_10/scene_41.sexp,63,63,4,233.278751,5,9,121,121,72
cad_abs,9,bench/cad2/random_size_9_nprim_10/scene_23.sexp,101,101,4,392.100096,5,9,198,198,113
cad_abs,9,bench/cad2/random_size_9_nprim_10/scene_5.sexp,86,84,5,579.718828,5,9,197,197,112
cad_abs,9,bench/cad2/random_size_9_nprim_10/scene_17.sexp,83,80,1,644.150257,5,9,176,176,100
cad_abs,9,bench/cad2/random_size_9_nprim_10/scene_18.sexp,120,115,6,695.322752,5,9,270,270,150
#+end_example

#+name: merge-results
#+begin_src sh :results file :file merge-results-full.csv
  cat merge_results.csv
  cat merge_joblog_abs | awk 'BEGIN {OFS=","} {if ($7 == "-1") print "cad_abs","9",$14}'
  cat merge_joblog_conc | awk 'BEGIN {OFS=","} {if ($7 == "-1") print "cad_conc","9",$14}'
#+end_src

#+RESULTS: merge-results
[[file:merge-results-full.csv]]

#+begin_src python :var data=merge-results
  import io
  import pandas as pd
  import matplotlib.pyplot as plt

  n_bins=100
  header = [
      'synth', 'max_size', 'bench', 'n_states', 'n_distinct_states',
      'n_roots', 'time', 'sol_size', 'gold_size', 'n_args', 'total_arg_in_degree', ''
  ]

  df = pd.read_csv('merge-results-full.csv', header=None, names=header)

  abs_10 = df[(df['bench'].str.contains('nprim_10')) & (df['synth'] == 'cad_abs')]
  conc_10 = df[(df['bench'].str.contains('nprim_10')) & (df['synth'] == 'cad_concrete')]
  abs_20 = df[(df['bench'].str.contains('nprim_20')) & (df['synth'] == 'cad_abs')]
  conc_20 = df[(df['bench'].str.contains('nprim_20')) & (df['synth'] == 'cad_concrete')]

  hist_kwargs = {'range': (0.0, 30000.0), 'density': True, 'histtype':'step', 'cumulative':True}
  fig, ax = plt.subplots(figsize=(8,4))
  ax.hist(abs_10['time'].fillna(float('inf')), n_bins, label='Abstract', **hist_kwargs)
  ax.hist(conc_10['time'].fillna(float('inf')), n_bins, label='Concrete', **hist_kwargs)
  ax.grid(True)
  ax.set_title('Random scenes of size 9 with 10 primitives')
  ax.set_ylabel('Likelihood')
  ax.set_xlabel('Runtime (ms)')
  ax.legend(loc='right')
  plt.savefig('merge_10prim.png')

  fig, ax = plt.subplots(figsize=(8,4))
  ax.hist(abs_20['time'].fillna(float('inf')), n_bins, label='Abstract', **hist_kwargs)
  ax.hist(conc_20['time'].fillna(float('inf')), n_bins, label='Concrete', **hist_kwargs)
  ax.grid(True)
  ax.set_title('Random scenes of size 9 with 20 primitives')
  ax.set_ylabel('Likelihood')
  ax.set_xlabel('Runtime (ms)')
  ax.legend(loc='right')
  plt.savefig('merge_20prim.png')
#+end_src

#+RESULTS:
